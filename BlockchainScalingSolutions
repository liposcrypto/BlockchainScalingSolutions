// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BlockchainScalingSolution {
    struct Channel {
        address partyA;
        address partyB;
        uint256 balanceA;
        uint256 balanceB;
        uint256 nonce;
    }

    mapping(bytes32 => Channel) public channels;

    // Events
    event ChannelOpened(bytes32 indexed channelId, address indexed partyA, address indexed partyB);
    event ChannelClosed(bytes32 indexed channelId, address indexed partyA, address indexed partyB, uint256 balanceA, uint256 balanceB);

    // Open a new state channel
    function openChannel(address partyB) external payable {
        require(msg.value > 0, "Deposit required to open channel");
        bytes32 channelId = keccak256(abi.encodePacked(msg.sender, partyB));
        require(channels[channelId].partyA == address(0), "Channel already exists");

        channels[channelId] = Channel({
            partyA: msg.sender,
            partyB: partyB,
            balanceA: msg.value,
            balanceB: 0,
            nonce: 0
        });

        emit ChannelOpened(channelId, msg.sender, partyB);
    }

    // Update channel balance and nonce
    function updateChannel(bytes32 channelId, uint256 balanceA, uint256 balanceB, uint256 nonce, bytes memory signature) external {
        Channel storage channel = channels[channelId];
        require(channel.partyA == msg.sender || channel.partyB == msg.sender, "Unauthorized");

        // Verify signature to ensure message authenticity
        bytes32 messageHash = keccak256(abi.encodePacked(channelId, balanceA, balanceB, nonce));
        require(recoverSigner(messageHash, signature) == channel.partyA || recoverSigner(messageHash, signature) == channel.partyB, "Invalid signature");

        // Update channel state
        channel.balanceA = balanceA;
        channel.balanceB = balanceB;
        channel.nonce = nonce;
    }

    // Close the channel and settle on-chain
    function closeChannel(bytes32 channelId) external {
        Channel storage channel = channels[channelId];
        require(channel.partyA == msg.sender || channel.partyB == msg.sender, "Unauthorized");

        // Ensure balances are updated off-chain
        require(channel.balanceA > 0 || channel.balanceB > 0, "No balance to settle");

        // Transfer balances to respective parties
        channel.partyA.transfer(channel.balanceA);
        channel.partyB.transfer(channel.balanceB);

        emit ChannelClosed(channelId, channel.partyA, channel.partyB, channel.balanceA, channel.balanceB);

        // Clear channel state
        delete channels[channelId];
    }

    // Function to recover signer from signature
    function recoverSigner(bytes32 messageHash, bytes memory signature) internal pure returns (address) {
        bytes32 r;
        bytes32 s;
        uint8 v;

        // Check the signature length
        if (signature.length != 65) {
            return address(0);
        }

        // Extract signature parts
        assembly {
            r := mload(add(signature, 32))
            s := mload(add(signature, 64))
            v := byte(0, mload(add(signature, 96)))
        }

        // EIP-2/3 compliant signature (r, s, v)
        if (v < 27) {
            v += 27;
        }

        // Return the signer address
        return ecrecover(messageHash, v, r, s);
    }

    // Fallback function to receive ETH
    receive() external payable {}
}
